(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Field availability does not belong to the table"
p3
sS'layer'
p4
S'/home/logan/web2py/applications/slughub/controllers/api.py'
p5
sS'code'
p6
S'# These are the controllers for your ajax api.\n\n\n# ----------------------HELPER-----------------------\nimport datetime\n\ndef get_user_name_from_email(email):\n    """Returns a string corresponding to the user first and last names,\n    given the user email."""\n    u = db(db.auth_user.email == email).select().first()\n    if u is None:\n        return \'None\'\n    else:\n        return \' \'.join([u.first_name, u.last_name])\n\n\ndef convertTime(t):\n    return t.strftime(\'%b %d, %I:%M %p\')\n\ndef isEdited(p):\n    print(not (p.updated_on == p.created_on))\n    print(p.updated_on)\n    print(p.created_on)\n    if (p.updated_on == p.created_on):\n        return False\n    else:\n        return True\n\n\ndef post_response(post_obj):\n    p = dict(\n        id=post_obj.id,\n        title=post_obj.post_title,\n        class_subject=post_obj.class_subject,\n        price=post_obj.price,\n        content=post_obj.post_content,\n        availability=post_obj.availability,\n        author=get_user_name_from_email(post_obj.user_email),\n        date_created=convertTime(post_obj.created_on),\n        # date_updated=timeCompare(post_obj),\n        date_updated=\'Edit: \'+convertTime(post_obj.updated_on) if isEdited(post_obj) else \'\',\n        author_email=post_obj.user_email\n    )\n    return p\n\n\n# ---------------------------------------------------\n\n@auth.requires_signature()\ndef get_author_and_email():\n    user_email = auth.user.email\n    user_name = get_user_name_from_email(user_email)\n    return response.json(dict(\n        user_email=user_email,\n        user_name=user_name\n    ))\n\n\ndef get_posts():\n    start_idx = int(request.vars.start_idx) if request.get_vars.start_idx is not None else 0\n    end_idx = int(request.vars.end_idx) if request.get_vars.end_idx is not None else 0\n    posts = []\n    has_more = False\n    rows = db().select(db.post.ALL, orderby=~db.post.created_on,\n                       limitby=(start_idx, end_idx + 1))  # + 1 for checking has_more\n    for i, r in enumerate(rows):\n        if i < end_idx - start_idx:\n            p = post_response(r)\n            posts.append(p)\n        else:\n            has_more = True\n    logged_in = auth.user_id is not None\n\n    return response.json(dict(\n        posts=posts,\n        logged_in=logged_in,\n        has_more=has_more,\n    ))\n\n\n# Note that we need the URL to be signed, as this changes the db.\n@auth.requires_signature()\ndef add_post():\n    p_id = db.post.insert(\n        post_title=request.post_vars.title,\n        price=request.post_vars.price,\n        availability=request.post_vars.availabilty,\n        class_subject=request.post_vars.class_subject,\n        post_content=request.post_vars.content\n    )\n    inserted_post = db.post(p_id)\n    print(inserted_post.user_email)\n    return response.json(dict(post=post_response(inserted_post)))\n\n@auth.requires_signature()\ndef update_post():\n    action_post = db.post(request.post_vars.id)\n    action_post.availability = request.post_vars.availabilty\n    action_post.price = request.post_vars.price\n    action_post.class_subject = request.post_vars.class_subject\n    action_post.post_title = request.post_vars.title\n    action_post.post_content= request.post_vars.content\n    action_post.updated_on = datetime.datetime.utcnow()\n    action_post.update_record()\n\n    print(\'Post:\' + request.post_vars.id + \' has been updated\' + str(action_post.updated_on))\n    return response.json(dict(post=post_response(action_post)))\n\n\n@auth.requires_signature()\ndef del_post():\n    row = db(db.post.id == request.post_vars.id).select().first()\n    row.delete_record()\n    return response.json(dict())\n\nresponse._vars=response._caller(add_post)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/logan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/logan/web2py/applications/slughub/controllers/api.py", line 116, in <module>\n  File "/home/logan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/logan/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/logan/web2py/applications/slughub/controllers/api.py", line 89, in add_post\n    post_content=request.post_vars.content\n  File "/home/logan/web2py/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/logan/web2py/gluon/packages/dal/pydal/objects.py", line 641, in _listify\n    \'Field %s does not belong to the table\' % name)\nSyntaxError: Field availability does not belong to the table\n'
p11
s.